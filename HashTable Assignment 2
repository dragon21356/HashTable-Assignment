#include <stdio.h>
#include <stdlib.h>

#define TABLESIZE 37
#define PRIME     13

enum Marker {EMPTY,USED,DELETED};

typedef struct _slot{
    int key;
    enum Marker indicator;
} HashSlot;

int HashInsert(int key, HashSlot hashTable[]);
int HashDelete(int key, HashSlot hashTable[]);


int hash1(int key);
int hash2(int key);

int main()
{
    int opt;
    int i;
    int key;
    int comparison;
    HashSlot hashTable[TABLESIZE];

    for(i=0;i<TABLESIZE;i++){
        hashTable[i].indicator = EMPTY;
        hashTable[i].key = 0;
    }

    printf("============= Hash Table ============\n");
    printf("|1. Insert a key to the hash table  |\n");
    printf("|2. Delete a key from the hash table|\n");
    printf("|3. Print the hash table            |\n");
    printf("|4. Quit                            |\n");
    printf("=====================================\n");
    printf("Enter selection: ");
    scanf("%d",&opt);
    while(opt>=1 && opt <=3){
        switch(opt){
        case 1:
            printf("Enter a key to be inserted:\n");
            scanf("%d",&key);
            comparison = HashInsert(key,hashTable);
            if(comparison <0)
                printf("Duplicate key\n");
            else if(comparison < TABLESIZE)
                printf("Insert: %d Key Comparisons: %d\n",key, comparison);
            else
                printf("Key Comparisons: %d. Table is full.\n",comparison);
            break;
        case 2:
            printf("Enter a key to be deleted:\n");
            scanf("%d",&key);
            comparison = HashDelete(key,hashTable);
            if(comparison <0)
                printf("%d does not exist.\n", key);
            else if(comparison <= TABLESIZE)
                printf("Delete: %d Key Comparisons: %d\n",key, comparison);
            else
                printf("Error\n");
            break;
        case 3:
            for(i=0;i<TABLESIZE;i++) printf("%d: %d %c\n",i, hashTable[i].key,hashTable[i].indicator==DELETED?'*':' ');
            break;
        }
        printf("Enter selection: ");
        scanf("%d",&opt);
    }
    return 0;
}

int hash1(int key)
{
    return (key % TABLESIZE);
}

int hash2(int key)
{
    return (key % PRIME) + 1;
}

int HashInsert(int key, HashSlot hashTable[]) {
    int hash = hash1(key);
    int hash2val = hash2(key);
    int comparisons = 0;

    while (hashTable[hash].indicator == USED) {  // keep probing until an empty or deleted slot is found
        if (hashTable[hash].key == key) {  // check for duplicates
            return -1;
        }
        hash = (hash + hash2val) % TABLESIZE;
        comparisons++;
        if (comparisons >= TABLESIZE) {  // table is full
            return comparisons;
        }
    }

    hashTable[hash].key = key;  // insert the key into an empty or deleted slot
    hashTable[hash].indicator = USED;
    return comparisons;
}

// This function takes a key and a hash table and returns the number of key comparisons made during deletion
int HashDelete(int key, HashSlot hashTable[]) {
    int comparisons = 0;        // Initialize the key comparisons counter to 0
    int index = hash1(key);     // Compute the initial hash index using hash function 1
    int step = hash2(key);      // Compute the hash step using hash function 2

    // Continue probing until an empty slot is reached
    while (hashTable[index].indicator != EMPTY) {
        comparisons++;          // Increment the key comparisons counter for each probed slot
        // If a used slot with the matching key is found, mark it as deleted and return the number of key comparisons made
        if (hashTable[index].key == key && hashTable[index].indicator == USED) {
            hashTable[index].indicator = DELETED;
            return comparisons;
        }
        // Move to the next slot based on the computed step
        index = (index + step) % TABLESIZE;
        // If all slots have been probed and the key has not been found, break out of the loop and return -1
        if (comparisons == TABLESIZE) {
            break;  
        }
    }
    return -1;  // The key was not found in the hash table
}
